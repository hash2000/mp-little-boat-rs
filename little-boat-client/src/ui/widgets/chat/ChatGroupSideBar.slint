import { GroupBox, ComboBox, VerticalBox, GroupBox, GridBox, Palette, TextEdit, Button, Switch, ScrollView, StyleMetrics, ListView } from "std-widgets.slint";
import { UsecasesPalette, FontSettings } from "../../Styles.slint";

export struct ChatGroupItem {
    title: string,
    messages-count: int,
    icon: image,
}

export global ChatGroupsAdapter {
    out property <[ChatGroupItem]> groups: [
        { title: "All chats", messages-count: 200 },
        { title: "New chats", messages-count: 4 },
        { title: "Voices" },
        { title: "Video" },
    ];
    in-out property <int> selected-group;
}

export component ChatGroupBarItem {
    in property <bool> is-selected;
    in property <string> title <=> text.text;
    in property <string> messages-count <=> messages.text;
    in property <image> icon;

    callback select <=> touch-area.clicked; 

    property <brush> foreground: Palette.foreground;
    property <length> style-min-height: UsecasesPalette.use-material ? 50px : 20px;
    min-height: max(root.style-min-height, layout.min-height);

    layout := HorizontalLayout {
        padding-bottom: 2px;

        background := Rectangle {
            border-radius: UsecasesPalette.use-material ? 20px : 12px;

            HorizontalLayout {
                padding-left: 8px;
                padding-right: 8px;
                spacing: 2px;

                text := Text {
                    color: root.foreground;
                    horizontal-stretch: 1;
                    vertical-alignment: center;
                    font-size: FontSettings.body.font-size;
                    font-weight: FontSettings.body.font-weight;
                }
            
                messages := Text {
                    color: root.foreground;
                    horizontal-stretch: 0;
                    vertical-alignment: center;
                    font-size: FontSettings.body.font-size;
                    font-weight: FontSettings.body.font-weight;
                }
            }

            touch-area := TouchArea {}
        }
    }

    states [
        selected when is-selected : {
            background.background: UsecasesPalette.state-selected;
            foreground: UsecasesPalette.accent-text;
        }
    ]
}

export component ChatGroupSideBar {
    horizontal-stretch: 0;
    min-width: 100px;

    callback selected(ChatGroupItem, int);

    VerticalLayout {
        spacing: 4px;
        Rectangle {
            background: Palette.alternate-background;
            border-radius: UsecasesPalette.use-material ? 0 : 4px;
            border-width: 1px;
            ListView {
                in-out property <int> selected-item: -1; 
                

                for item[index] in ChatGroupsAdapter.groups: ChatGroupBarItem {
                    height: self.min-height;
                    title: item.title;
                    messages-count: item.messages-count > 0 ? item.messages-count : "";
                    icon: item.icon;
                    is-selected: index == selected-item;
                    
                    select => {
                        selected-item = index;
                        selected(item, index);
                    }
                }
            }
        }
    }
}
